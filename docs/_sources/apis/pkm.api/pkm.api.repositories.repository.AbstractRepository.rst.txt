:orphan:

AbstractRepository \(Class\)
############################

..	code-block:: python
	
	class AbstractRepository(Repository, ABC)
	
Class Methods
=============

..	code-block:: python
	
	def __init__(self, name: str)
	
Description
-----------

Not Documented

Arguments
---------

..	rst-class:: args-table
	
..	list-table:: 
	:widths: auto
	:header-rows: 1
	
	*	-	Name
		-	Type
		-	Description
	*	-	self
		-	Any
		-	No Description
	*	-	name
		-	str
		-	No Description
	
-----------------------

..	code-block:: python
	
	@property
	def name(self) -> str
	
Description
-----------

Not Documented

Arguments
---------

..	rst-class:: args-table
	
..	list-table:: 
	:widths: auto
	:header-rows: 1
	
	*	-	Name
		-	Type
		-	Description
	*	-	self
		-	Any
		-	No Description
	
-----------------------

..	code-block:: python
	
	def match(self, dependency: Union[Dependency, str], env: 'Environment') -> List[Package]
	
Description
-----------

Not Documented

Arguments
---------

..	rst-class:: args-table
	
..	list-table:: 
	:widths: auto
	:header-rows: 1
	
	*	-	Name
		-	Type
		-	Description
	*	-	self
		-	Any
		-	No Description
	*	-	dependency
		-	Union[Dependency, str]
		-	No Description
	*	-	env
		-	'Environment'
		-	No Description
	
-----------------------

..	code-block:: python
	
	@property
	def publisher(self) -> Optional['RepositoryPublisher']
	
Description
-----------

Not Documented

Arguments
---------

..	rst-class:: args-table
	
..	list-table:: 
	:widths: auto
	:header-rows: 1
	
	*	-	Name
		-	Type
		-	Description
	*	-	self
		-	Any
		-	No Description
	
-----------------------

..	code-block:: python
	
	def _filter_prereleases(self, packages: List[Package], dependency: Dependency) -> List[Package]
	
Description
-----------

Not Documented

Arguments
---------

..	rst-class:: args-table
	
..	list-table:: 
	:widths: auto
	:header-rows: 1
	
	*	-	Name
		-	Type
		-	Description
	*	-	self
		-	Any
		-	No Description
	*	-	packages
		-	List[Package]
		-	No Description
	*	-	dependency
		-	Dependency
		-	No Description
	
-----------------------

..	code-block:: python
	
	def _sort_by_priority(self, dependency: Dependency, packages: List[Package]) -> List[Package]
	
Description
-----------

sorts `matches` by the required priority

Arguments
---------

..	rst-class:: args-table
	
..	list-table:: 
	:widths: auto
	:header-rows: 1
	
	*	-	Name
		-	Type
		-	Description
	*	-	self
		-	Any
		-	No Description
	*	-	dependency
		-	Dependency
		-	 the dependency that resulted in the given `packages`
	*	-	packages
		-	List[Package]
		-	 the packages that were the result `_do_match(dependency)`
	
Returns
-------

 sorted packages by priority (first is more important than last)

-----------------------

..	code-block:: python
	
	@abstractmethod
	def _do_match(self, dependency: Dependency, env: 'Environment') -> List[Package]
	
Description
-----------

IMPLEMENTATION NOTICE:
you don't have to filter pre-releases or packages based on the given environment
it is handled for you in the `match` method that call this one.

Arguments
---------

..	rst-class:: args-table
	
..	list-table:: 
	:widths: auto
	:header-rows: 1
	
	*	-	Name
		-	Type
		-	Description
	*	-	self
		-	Any
		-	No Description
	*	-	dependency
		-	Dependency
		-	 the dependency to match
	*	-	env
		-	'Environment'
		-	 the environment that the returned packages should be applicable with
	
Returns
-------

 list of all the packages in this repository that match the given `dependency` version spec
