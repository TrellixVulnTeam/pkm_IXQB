:orphan:

Environment \(Class\)
#####################

..	code-block:: python
    
    class Environment(HasAttachedRepository)
    
Class Methods
=============

..	code-block:: python
    
    @property
    def path(self) -> Path
    
Description
-----------

Not Documented

Arguments
---------

..	rst-class:: args-table
    
..	list-table:: 
    :widths: auto
    :header-rows: 1
    
    *   -   Name
        -   Type
        -   Description
    *   -   self
        -   Any
        -   No Description
    
Returns
-------

the path for this environment root directory

-----------------------

..	code-block:: python
    
    @cached_property
    def zoo(self) -> Optional['EnvironmentsZoo']
    
Description
-----------

Not Documented

Arguments
---------

..	rst-class:: args-table
    
..	list-table:: 
    :widths: auto
    :header-rows: 1
    
    *   -   Name
        -   Type
        -   Description
    *   -   self
        -   Any
        -   No Description
    
-----------------------

..	code-block:: python
    
    @property
    def app_containers(self) -> 'ContainerizedApplications'
    
Description
-----------

Not Documented

Arguments
---------

..	rst-class:: args-table
    
..	list-table:: 
    :widths: auto
    :header-rows: 1
    
    *   -   Name
        -   Type
        -   Description
    *   -   self
        -   Any
        -   No Description
    
-----------------------

..	code-block:: python
    
    @cached_property
    def repository_management(self) -> 'RepositoryManagement'
    
Description
-----------

Not Documented

Arguments
---------

..	rst-class:: args-table
    
..	list-table:: 
    :widths: auto
    :header-rows: 1
    
    *   -   Name
        -   Type
        -   Description
    *   -   self
        -   Any
        -   No Description
    
-----------------------

..	code-block:: python
    
    @property
    def name(self) -> str
    
Description
-----------

Not Documented

Arguments
---------

..	rst-class:: args-table
    
..	list-table:: 
    :widths: auto
    :header-rows: 1
    
    *   -   Name
        -   Type
        -   Description
    *   -   self
        -   Any
        -   No Description
    
-----------------------

..	code-block:: python
    
    @cached_property
    def installation_target(self) -> PackageInstallationTarget
    
Description
-----------

Not Documented

Arguments
---------

..	rst-class:: args-table
    
..	list-table:: 
    :widths: auto
    :header-rows: 1
    
    *   -   Name
        -   Type
        -   Description
    *   -   self
        -   Any
        -   No Description
    
-----------------------

..	code-block:: python
    
    @cached_property
    def interpreter_version(self) -> StandardVersion
    
Description
-----------

Not Documented

Arguments
---------

..	rst-class:: args-table
    
..	list-table:: 
    :widths: auto
    :header-rows: 1
    
    *   -   Name
        -   Type
        -   Description
    *   -   self
        -   Any
        -   No Description
    
Returns
-------

the version of the environment's python interpreter

-----------------------

..	code-block:: python
    
    @cached_property
    def interpreter_path(self) -> Path
    
Description
-----------

Not Documented

Arguments
---------

..	rst-class:: args-table
    
..	list-table:: 
    :widths: auto
    :header-rows: 1
    
    *   -   Name
        -   Type
        -   Description
    *   -   self
        -   Any
        -   No Description
    
Returns
-------

the path for the environment's python interpreter

-----------------------

..	code-block:: python
    
    @cached_property
    def operating_platform(self) -> 'OperatingPlatform'
    
Description
-----------

Not Documented

Arguments
---------

..	rst-class:: args-table
    
..	list-table:: 
    :widths: auto
    :header-rows: 1
    
    *   -   Name
        -   Type
        -   Description
    *   -   self
        -   Any
        -   No Description
    
-----------------------

..	code-block:: python
    
    def compatibility_tag_score(self, tag: str) -> Optional[Comparable]
    
Description
-----------

compute the compatibility score for the given pep425 compatibility tag

Arguments
---------

..	rst-class:: args-table
    
..	list-table:: 
    :widths: auto
    :header-rows: 1
    
    *   -   Name
        -   Type
        -   Description
    *   -   self
        -   Any
        -   No Description
    *   -   tag
        -   str
        -    the pep425 compatibility tag
    
Returns
-------

an opaque score object that support __le__ and __eq__ operations (read: comparable)
which can be treated as a score (read: higher is better)

-----------------------

..	code-block:: python
    
    @cached_property
    def markers(self) -> Dict[str, str]
    
Description
-----------

Not Documented

Arguments
---------

..	rst-class:: args-table
    
..	list-table:: 
    :widths: auto
    :header-rows: 1
    
    *   -   Name
        -   Type
        -   Description
    *   -   self
        -   Any
        -   No Description
    
Returns
-------

pep508 environment markers

-----------------------

..	code-block:: python
    
    @cached_property
    def site_packages(self) -> SitePackages
    
Description
-----------

Not Documented

Arguments
---------

..	rst-class:: args-table
    
..	list-table:: 
    :widths: auto
    :header-rows: 1
    
    *   -   Name
        -   Type
        -   Description
    *   -   self
        -   Any
        -   No Description
    
-----------------------

..	code-block:: python
    
    @cached_property
    def markers_hash(self) -> str
    
Description
-----------

Not Documented

Arguments
---------

..	rst-class:: args-table
    
..	list-table:: 
    :widths: auto
    :header-rows: 1
    
    *   -   Name
        -   Type
        -   Description
    *   -   self
        -   Any
        -   No Description
    
Returns
-------

a hash built from the environment's markers, can be used to identify instances of this environment

-----------------------

..	code-block:: python
    
    @contextmanager
    def activate(self, env: MutableMapping[str, str] = os.environ)
    
Description
-----------

Not Documented

Arguments
---------

..	rst-class:: args-table
    
..	list-table:: 
    :widths: auto
    :header-rows: 1
    
    *   -   Name
        -   Type
        -   Description
    *   -   self
        -   Any
        -   No Description
    *   -   env
        -   MutableMapping[str, str]
        -   No Description
    
-----------------------

..	code-block:: python
    
    def exec_proc(self, cmd: str, args: Optional[List[str]] = None, 
        env: Optional[Dict[str, str]] = None) -> NoReturn
    
Description
-----------

similar to `run_proc` but does not return, this process will become the new process
(on supporting operating systems)

Arguments
---------

..	rst-class:: args-table
    
..	list-table:: 
    :widths: auto
    :header-rows: 1
    
    *   -   Name
        -   Type
        -   Description
    *   -   self
        -   Any
        -   No Description
    *   -   cmd
        -   str
        -    the command to execute
    *   -   args
        -   Optional[List[str]]
        -    list of arguments
    *   -   env
        -   Optional[Dict[str, str]]
        -    environment variables
    
-----------------------

..	code-block:: python
    
    def run_proc(self, args: List[str], **subprocess_run_kwargs) -> CompletedProcess
    
Description
-----------

execute the given command in a new process, the process will be executed with its path adjusted to include this
venv binaries and scripts

Arguments
---------

..	rst-class:: args-table
    
..	list-table:: 
    :widths: auto
    :header-rows: 1
    
    *   -   Name
        -   Type
        -   Description
    *   -   self
        -   Any
        -   No Description
    *   -   args
        -   List[str]
        -    the command to execute
    *   -   subprocess_run_kwargs
        -   Any
        -    any argument that is accepted by `subprocess.run` (aside from args)
    
Returns
-------

a `CompletedProcess` instance describing the completion of the requested process

-----------------------

..	code-block:: python
    
    def reload(self)
    
Description
-----------

reload volatile information about this environment (like the installed packages)

Arguments
---------

..	rst-class:: args-table
    
..	list-table:: 
    :widths: auto
    :header-rows: 1
    
    *   -   Name
        -   Type
        -   Description
    *   -   self
        -   Any
        -   No Description
    
-----------------------

..	code-block:: python
    
    def install_link(self, name: str, paths: List[Path], 
        imports: Optional[List[str]] = None)
    
Description
-----------

installs a pth link (named `name`.pth) in the site packages (purelib)

Arguments
---------

..	rst-class:: args-table
    
..	list-table:: 
    :widths: auto
    :header-rows: 1
    
    *   -   Name
        -   Type
        -   Description
    *   -   self
        -   Any
        -   No Description
    *   -   name
        -   str
        -   No Description
    *   -   paths
        -   List[Path]
        -    the paths to add in the created link
    *   -   imports
        -   Optional[List[str]]
        -    imports to execute at runtime when reading this link (example: `imports` = ['abc'] will import the abc package when the interpreter attached to this environment gets executed and meets the created link)
    
-----------------------

..	code-block:: python
    
    def install(self, dependencies: _DEPENDENCIES_T, 
        repository: Optional[Repository] = None, user_requested: bool = True, 
        dependencies_override: Optional[Dict[str, List[Dependency]]] = None, 
        editables: Optional[Dict[str, bool]] = None, 
        updates: Optional[List[str]] = None)
    
Description
-----------

installs the given set of dependencies into this environment.
see: `prepare_installation` for more information about this method arguments

Arguments
---------

..	rst-class:: args-table
    
..	list-table:: 
    :widths: auto
    :header-rows: 1
    
    *   -   Name
        -   Type
        -   Description
    *   -   self
        -   Any
        -   No Description
    *   -   dependencies
        -   _DEPENDENCIES_T
        -   No Description
    *   -   repository
        -   Optional[Repository]
        -   No Description
    *   -   user_requested
        -   bool
        -   No Description
    *   -   dependencies_override
        -   Optional[Dict[str, List[Dependency]]]
        -   No Description
    *   -   editables
        -   Optional[Dict[str, bool]]
        -   No Description
    *   -   updates
        -   Optional[List[str]]
        -   No Description
    
-----------------------

..	code-block:: python
    
    def force_remove(self, package: str)
    
Description
-----------

forcefully remove the required package, will not remove its dependencies and will not check if other packages
depends on it - use this method with care (or don't use it at all :) )

Arguments
---------

..	rst-class:: args-table
    
..	list-table:: 
    :widths: auto
    :header-rows: 1
    
    *   -   Name
        -   Type
        -   Description
    *   -   self
        -   Any
        -   No Description
    *   -   package
        -   str
        -    the name of the package to be removed
    
-----------------------

..	code-block:: python
    
    def uninstall(self, packages: _PACKAGE_NAMES_T) -> Set[str]
    
Description
-----------

attempt to remove the required packages from this env together will all the dependencies that may become orphan
as a result of this step.

if a package `p in packages` is a dependency (directly or indirectly) of another
"user requested" package `q not in packages` then `p` will be kept in the environment but its
"user requested" flag will be removed (if it was existed)

Arguments
---------

..	rst-class:: args-table
    
..	list-table:: 
    :widths: auto
    :header-rows: 1
    
    *   -   Name
        -   Type
        -   Description
    *   -   self
        -   Any
        -   No Description
    *   -   packages
        -   _PACKAGE_NAMES_T
        -    the package names to remove
    
-----------------------

..	code-block:: python
    
    @cached_property
    def entrypoints(self) -> Dict[str, List[EntryPoint]]
    
Description
-----------

Not Documented

Arguments
---------

..	rst-class:: args-table
    
..	list-table:: 
    :widths: auto
    :header-rows: 1
    
    *   -   Name
        -   Type
        -   Description
    *   -   self
        -   Any
        -   No Description
    
Returns
-------

all entrypoints in this environment grouped by their defined group

-----------------------

..	code-block:: python
    
    @staticmethod
    def is_valid(path: Path) -> bool
    
Description
-----------

Not Documented

Arguments
---------

..	rst-class:: args-table
    
..	list-table:: 
    :widths: auto
    :header-rows: 1
    
    *   -   Name
        -   Type
        -   Description
    *   -   path
        -   Path
        -    a path that may contain a python environment
    
Returns
-------

true if this path contains a python environment

-----------------------

..	code-block:: python
    
    @classmethod
    def of_interpreter(cls, interpreter: Path, site: str = 'user') -> Environment
    
Description
-----------

load an environment using the given interpreter

Arguments
---------

..	rst-class:: args-table
    
..	list-table:: 
    :widths: auto
    :header-rows: 1
    
    *   -   Name
        -   Type
        -   Description
    *   -   cls
        -   Any
        -   No Description
    *   -   interpreter
        -   Path
        -    the interpreter to use
    *   -   site
        -   str
        -    control the installation site of the returned environment - acceptable values are 'user' and 'system', it is only applicable for system (read: non-virtual) environments. the 'system' option just use the regular site, you can read about the 'user' site in documentation of `site.getusersitepackages()`
    
Returns
-------

the loaded environment

-----------------------

..	code-block:: python
    
    @classmethod
    def current(cls, site: str = 'user') -> Environment
    
Description
-----------

load the environment used by the currently executed interpreter

Arguments
---------

..	rst-class:: args-table
    
..	list-table:: 
    :widths: auto
    :header-rows: 1
    
    *   -   Name
        -   Type
        -   Description
    *   -   cls
        -   Any
        -   No Description
    *   -   site
        -   str
        -    control the installation site of the returned environment - acceptable values are 'user' and 'system', it is only applicable for system (read: non-virtual) environments. the 'system' option just use the regular site, you can read about the 'user' site in documentation of `site.getusersitepackages()`
    
Returns
-------

the loaded environment

-----------------------

..	code-block:: python
    
    @classmethod
    def load(cls, path: Union[Path, str]) -> Environment
    
Description
-----------

Not Documented

Arguments
---------

..	rst-class:: args-table
    
..	list-table:: 
    :widths: auto
    :header-rows: 1
    
    *   -   Name
        -   Type
        -   Description
    *   -   cls
        -   Any
        -   No Description
    *   -   path
        -   Union[Path, str]
        -   No Description
    